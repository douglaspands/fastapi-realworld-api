[tool.poetry]
name = "fastapi-realworld-api"
version = "0.2.0"
description = "Exemplo de projeto utilizado no mundo real"
authors = ["Douglas <douglaspands@gmail.com>"]
readme = "README.md"
packages = [{include = "server"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.110.3"
sqlmodel = "^0.0.17"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
pydantic-settings = "^2.2.1"
gunicorn = "^22.0.0"
aiosqlite = "^0.20.0"
pydash = "^8.0.1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.9"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.2"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
mypy = "^1.10.0"
rich = "^13.7.1"
faker = "^25.0.0"
httpx = "^0.27.0"
pytest-asyncio = "^0.23.6"
alembic = "^1.13.1"
types-passlib = "^1.7.7.20240327"
types-python-jose = "^3.3.4.20240106"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# pyproject.toml
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=server --cov-report html --cov-fail-under=85"
python_files = "test_*.py"
testpaths = "tests"
norecursedirs = ["__pycache__"]
asyncio_mode = "auto"

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[tool.poetry.scripts]
server = 'scripts.poetry:server'
lint = 'scripts.poetry:lint'
format = 'scripts.poetry:format'
test = 'scripts.poetry:test'
build = 'scripts.poetry:build'
migrate = 'scripts.poetry:migrate'
# production
server_production = 'scripts.poetry:server_production'